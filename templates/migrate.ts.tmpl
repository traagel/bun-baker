import { db } from '@/config';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const MIGRATIONS_DIR = path.join(__dirname, 'migrations');

interface Migration {
  id: number;
  name: string;
  applied_at: Date;
}

async function ensureMigrationTable() {
  await db.none(`
    CREATE TABLE IF NOT EXISTS migrations (
      id SERIAL PRIMARY KEY,
      name VARCHAR(255) NOT NULL UNIQUE,
      applied_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    )
  `);
}

async function getAppliedMigrations(): Promise<string[]> {
  return db.map('SELECT name FROM migrations ORDER BY id', [], 
    (row: Migration) => row.name);
}

async function applyMigration(filename: string) {
  console.log(`Applying migration: ${filename}`);
  const filePath = path.join(MIGRATIONS_DIR, filename);
  const sql = fs.readFileSync(filePath, 'utf8');
  
  try {
    // Start a transaction
    await db.tx(async t => {
      // Apply the migration
      await t.none(sql);
      // Record the migration
      await t.none('INSERT INTO migrations(name) VALUES($1)', [filename]);
    });
    console.log(`✅ Migration applied: ${filename}`);
  } catch (error) {
    console.error(`❌ Error applying migration ${filename}:`, error);
    throw error;
  }
}

async function resetDatabase() {
  console.log('🚨 Resetting database...');
  try {
    // Drop all tables - use system catalog to find them
    const tables = await db.map(
      `SELECT tablename FROM pg_tables WHERE schemaname = 'public'`,
      [],
      (row: { tablename: string }) => row.tablename
    );
    
    if (tables.length > 0) {
      await db.none(`DROP TABLE IF EXISTS ${tables.join(', ')} CASCADE`);
    }
    
    console.log('✅ Database reset complete.');
  } catch (error) {
    console.error('❌ Error resetting database:', error);
    throw error;
  }
}

async function runMigrations() {
  console.log('Starting migrations...');
  
  try {
    // Ensure migrations table exists
    await ensureMigrationTable();
    
    // Get applied migrations
    const appliedMigrations = await getAppliedMigrations();
    
    // Get all migration files
    const migrationFiles = fs.readdirSync(MIGRATIONS_DIR)
      .filter(file => file.endsWith('.sql'))
      .sort(); // Ensure order by filename
    
    // Apply pending migrations
    let appliedCount = 0;
    for (const file of migrationFiles) {
      if (!appliedMigrations.includes(file)) {
        await applyMigration(file);
        appliedCount++;
      }
    }
    
    if (appliedCount === 0) {
      console.log('No pending migrations.');
    } else {
      console.log(`✅ Applied ${appliedCount} migrations.`);
    }
  } catch (error) {
    console.error('❌ Migration failed:', error);
    process.exit(1);
  }
}

// Main execution
(async () => {
  const args = process.argv.slice(2);
  
  if (args.includes('reset')) {
    await resetDatabase();
  }
  
  await runMigrations();
  
  // Close the database connection
  db.$pool.end();
})(); 