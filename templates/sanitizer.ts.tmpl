import { FastifyRequest } from 'fastify';

export const sanitizeRequestBody = (request: FastifyRequest) => {
  if (request.body && typeof request.body === 'object') {
    // Deep sanitize to prevent NoSQL injection, XSS, etc.
    sanitizeObject(request.body);
  }
};

// Helper function to recursively sanitize an object
const sanitizeObject = (obj: Record<string, any>) => {
  for (const key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      const value = obj[key];
      
      if (typeof value === 'string') {
        // Sanitize string values
        obj[key] = sanitizeString(value);
      } else if (value !== null && typeof value === 'object') {
        // Recursively sanitize nested objects
        sanitizeObject(value);
      }
    }
  }
};

// Sanitize a string to prevent common security issues
const sanitizeString = (str: string): string => {
  // Basic sanitization for demonstration purposes
  // In a production environment, consider using a dedicated sanitization library
  return str
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;')
    .replace(/`/g, '&#x60;');
}; 